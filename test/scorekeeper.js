// Generated by CoffeeScript 1.10.0
(function() {
  var ScoreKeeper, chai, expect, robotStub, sinon;

  chai = require('chai');

  sinon = require('sinon');

  chai.use(require('sinon-chai'));

  expect = chai.expect;

  ScoreKeeper = require('../src/scorekeeper.coffee');

  robotStub = {};

  describe('ScoreKeeper', function() {
    var s;
    s = {};
    beforeEach(function() {
      robotStub = {
        brain: {
          data: {},
          on: function() {},
          emit: function() {},
          save: function() {}
        },
        logger: {
          debug: function() {}
        }
      };
      return s = new ScoreKeeper(robotStub);
    });
    describe('adding', function() {
      it('adds points to a user', function() {
        var r;
        r = s.add('to', 'from', 'room');
        return expect(r[0]).to.equal(1);
      });
      it('adds points to a user for a reason', function() {
        var r;
        r = s.add('to', 'from', 'room', 'because points');
        return expect(r).to.deep.equal([1, 1]);
      });
      it('does not allow spamming points', function() {
        var r, r2;
        r = s.add('to', 'from', 'room', 'because points');
        r2 = s.add('to', 'from', 'room', 'because points');
        return expect(r2).to.deep.equal([null, null]);
      });
      return it('adds more points to a user for a reason', function() {
        var r;
        r = s.add('to', 'from', 'room', 'because points');
        r = s.add('to', 'another-from', 'room', 'because points');
        return expect(r).to.deep.equal([2, 2]);
      });
    });
    describe('subtracting', function() {
      it('adds points to a user', function() {
        var r;
        r = s.subtract('to', 'from', 'room');
        return expect(r[0]).to.equal(-1);
      });
      it('subtracts points from a user for a reason', function() {
        var r;
        r = s.subtract('to', 'from', 'room', 'because points');
        return expect(r).to.deep.equal([-1, -1]);
      });
      it('does not allow spamming points', function() {
        var r, r2;
        r = s.subtract('to', 'from', 'room', 'because points');
        r2 = s.subtract('to', 'from', 'room', 'because points');
        return expect(r2).to.deep.equal([null, null]);
      });
      return it('subtracts more points from a user for a reason', function() {
        var r;
        r = s.subtract('to', 'from', 'room', 'because points');
        r = s.subtract('to', 'another-from', 'room', 'because points');
        return expect(r).to.deep.equal([-2, -2]);
      });
    });
    describe('erasing', function() {
      it('erases a reason from a user', function() {
        var p, r, rs;
        p = s.add('to', 'from', 'room', 'reason');
        r = s.erase('to', 'from', 'room', 'reason');
        expect(r).to.deep.equal(true);
        rs = s.reasonsForUser('to');
        return expect(rs.reason).to.equal(void 0);
      });
      return it('erases a user from the scoreboard', function() {
        var p, p2, r;
        p = s.add('to', 'from', 'room', 'reason');
        expect(p).to.deep.equal([1, 1]);
        r = s.erase('to', 'from', 'room');
        expect(r).to.equal(true);
        p2 = s.scoreForUser('to');
        return expect(p2).to.equal(0);
      });
    });
    return describe('scores', function() {
      it('returns the score for a user', function() {
        var r;
        s.add('to', 'from', 'room');
        r = s.scoreForUser('to');
        return expect(r).to.equal(1);
      });
      return it('returns the reasons for a user', function() {
        var r;
        s.add('to', 'from', 'room', 'because points');
        r = s.reasonsForUser('to');
        return expect(r).to.deep.equal({
          'because points': 1
        });
      });
    });
  });

}).call(this);
